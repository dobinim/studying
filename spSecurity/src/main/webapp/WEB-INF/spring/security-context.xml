<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security.xsd"
>
	
	<!-- beans:beans엘리먼트(태그)안에 security설정 엘리먼트(태그) -->
	<!-- 권한처리 하지 않는 경로 설정 -->
	<!-- 
		<http pattern="/media" security="none"></http>
	-->

	<!-- 권한처리 (authority) : http 엘리먼트 이용-->	
	<http auto-config="true" use-expressions="true">
		<!-- auto-config="true" : form을 기반으로 로그인 -->
		<!-- use-expressions="true" : spring의 EL문 사용 -->
		
		<access-denied-handler error-page="/main"/> <!-- 로그인 성공시 첫 페이지 -->
		<!-- 로그인 이후 로그인 반복, 회원가입 등 권한 없는 페이지 접속 시도 시 요청 경로 -->

		<headers><frame-options disabled="true"/></headers>
		<!-- security에서는 기본적으로 iframe사용을 제한 >> 이것을 풀음 -->
		
		
		<!-- 각 요청 별 권한 지정 : intercept-url태그 사용 지정 -->
		<!-- intercept-url 우선순위는 위에 있을수록 높음 -->
		<!-- pattern : 요청 경로 속성 / access : 접근 대상 지정 -->
		<intercept-url pattern="/" access="permitAll"/> <!-- 첫페이지는 모두 접근 가능 -->
		<intercept-url pattern="/images/**" access="permitAll"/> 
		<intercept-url pattern="/processLogin" access="permitAll"/> <!-- 로그인 실패 요청 경로 -->
		<intercept-url pattern="/join_view" access="isAnonymous()"/> <!-- 비로그인만 접근 가능 -->
		<intercept-url pattern="/join" access="isAnonymous()"/>
		<intercept-url pattern="/login" access="isAnonymous()"/>
		<intercept-url pattern="/login_view" access="isAnonymous()"/>
		<intercept-url pattern="/**" access="hasRole('ROLE_USER')" requires-channel="https"/>
		<!-- https로 접근 / hasRole('ROLE_USER'): 회원만 접근 -->
		<!-- isAnonymous()나 hasRole()은 spring EL제공 메서드 -->
		<!-- Role등급은 ROLE_USER, ROLE_ADMIN, ROLE_MANAGE 등이 있음 -->
		
		<!-- 
			form-login : 로그인 관련 사항 설정. 속성으로 처리.
			html form에서 action 속성 기본값을 login으로 (action="login")
			login-processing-url : login요청 경로
			login-page : 로그인 창의 요청 경로
			username-parameter : form에서 id를 나타내는 name속성 값 (<input name="pid"/>)
			authentication-failure-url : 로그인 인증 실패시 요청 경로
			default-target-url : 로그인 성공 시 요청 경로
			always-use-default-target : 성공시 가는 default-target-url="/main"을 보장해주기 위해 설정
		-->
		<form-login 
			login-processing-url = "/login"
			login-page = "/login_view"
			username-parameter = "pid"
			password-parameter = "ppw"
			default-target-url = "/main"
			authentication-failure-url = "/processLogin?error=1"
			always-use-default-target = "true"
		/>
		
		<!-- logout 태그 : 로그아웃처리(스프링에서는 로그아웃도 form을 이용) -->
		<!-- 
			invalidate-session="true" : 세션 초기화 
			logout-url="/logout" : 로그아웃 처리 경로
			logout-success-url : 로그아웃 이후 요청 경로
			delete-cookies : 쿠키 삭제. 기본인 JSESSIONID와 remember-me시 사용하는 remember-me 쿠키 삭제
		-->
		<logout invalidate-session="true" logout-url="/logout"
			logout-success-url = "/processLogin?logout=1" delete-cookies="JSESSIONID,remember-me"/>
		
		<!-- 명시적으로 로그아웃하지 않았을 때 다시 사이트를 입장하면 로그인 상태 유지 -->
		<remember-me remember-me-parameter="remember-me" remember-me-cookie="remember-me"
			key="kimskey" token-validity-seconds="3600"/>
		
		<!-- 사이트 간 요청 위조 CSRF(Cross-site Request forgery)는 다른 사이트에서
			페이지를 위조하여 접근하는 해킹을 말하며 spring security는 이를 예방해줌 -->
		<csrf disabled="false"/> <!-- false가 기본값. csrf예방 기능 동작 -->
		<!-- true이어야 ajax와 파일업로드 가능 >> input hidden으로 csrf를 보내면 false이어도 가능 -->
		<!-- 파일 업로드는 input으로 처리하지 않고 action뒤에 csrf를 줌. form이 아닌 링크(a)는 get방식 ajax로 보냄 -->
	</http>
	
	<!-- DB 이용 인증처리 (authentication) -->
	<authentication-manager>
		<authentication-provider user-service-ref="customUserDetailsService">
			<password-encoder ref="passwordEncoder"/>
		</authentication-provider>
	</authentication-manager>
	<!-- user-service-ref="customUserDetailsService"객체를 나타내는 bean -->
	<!-- 인증처리 클래스. UserDetailsService인터페이스를 구현한 클래스로 개발자가 만듦 -->
	<beans:bean id="customUserDetailsService" class="com.kim.sec.security.CustomUserDetailsService"/>
	
	<!-- 암호화 된 패스워드 처리 bean -->
	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
</beans:beans>